// <auto-generated />
using System;
using GarderieManagementClean.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GarderieManagementClean.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220801140547_AddedCloudPhotoIdToPhoto")]
    partial class AddedCloudPhotoIdToPhoto
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserNotification", b =>
                {
                    b.Property<string>("ApplicationUsersId")
                        .HasColumnType("text");

                    b.Property<int>("NotificationsId")
                        .HasColumnType("integer");

                    b.HasKey("ApplicationUsersId", "NotificationsId");

                    b.HasIndex("NotificationsId");

                    b.ToTable("ApplicationUserNotification");
                });

            modelBuilder.Entity("EnfantPhoto", b =>
                {
                    b.Property<int>("EnfantsId")
                        .HasColumnType("integer");

                    b.Property<int>("PhotosId")
                        .HasColumnType("integer");

                    b.HasKey("EnfantsId", "PhotosId");

                    b.HasIndex("PhotosId");

                    b.ToTable("EnfantPhoto");
                });

            modelBuilder.Entity("GarderieManagementClean.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CodePostal")
                        .HasColumnType("text");

                    b.Property<int>("GarderieId")
                        .HasColumnType("integer");

                    b.Property<string>("Province")
                        .HasColumnType("text");

                    b.Property<string>("Rue")
                        .HasColumnType("text");

                    b.Property<string>("Telephone")
                        .HasColumnType("text");

                    b.Property<string>("Ville")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GarderieId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("GarderieManagementClean.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int?>("GarderieId")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("hasAccount")
                        .HasColumnType("boolean");

                    b.Property<bool>("isOnline")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("GarderieId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GarderieManagementClean.Domain.Entities.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AbsenceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AbsenceDescription")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ArrivedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EnfantId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LeftAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EnfantId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("GarderieManagementClean.Domain.Entities.Enfant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateNaissance")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("GarderieId")
                        .HasColumnType("integer");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Nom")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GarderieId");

                    b.HasIndex("GroupId");

                    b.ToTable("Enfants");
                });

            modelBuilder.Entity("GarderieManagementClean.Domain.Entities.Garderie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Garderies");
                });

            modelBuilder.Entity("GarderieManagementClean.Domain.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EducatriceId")
                        .HasColumnType("text");

                    b.Property<int>("GarderieId")
                        .HasColumnType("integer");

                    b.Property<string>("HexColor")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EducatriceId")
                        .IsUnique();

                    b.HasIndex("GarderieId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("GarderieManagementClean.Domain.Entities.JournalDeBord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Activite_Message")
                        .HasColumnType("text");

                    b.Property<string>("Commentaire_Message")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EducatriceId")
                        .HasColumnType("text");

                    b.Property<int>("EnfantId")
                        .HasColumnType("integer");

                    b.Property<int>("Humeur_Rating")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Manger_Message")
                        .HasColumnType("text");

                    b.Property<int>("Manger_Rating")
                        .HasColumnType("integer");

                    b.Property<int>("Participation_Rating")
                        .HasColumnType("integer");

                    b.Property<int>("Toilette_Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EducatriceId");

                    b.HasIndex("EnfantId");

                    b.ToTable("JournalDeBords");
                });

            modelBuilder.Entity("GarderieManagementClean.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataId")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer");

                    b.Property<bool>("Seen")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("GarderieManagementClean.Domain.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("EnfantId")
                        .HasColumnType("integer");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("MimeType")
                        .HasColumnType("text");

                    b.Property<string>("cloudId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EnfantId")
                        .IsUnique();

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("GarderieManagementClean.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("boolean");

                    b.Property<string>("JwtId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<bool>("isUsed")
                        .HasColumnType("boolean");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("GarderieManagementClean.Domain.Entities.TutorEnfant", b =>
                {
                    b.Property<int>("EnfantId")
                        .HasColumnType("integer");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<bool>("AuthorizePickup")
                        .HasColumnType("boolean");

                    b.Property<bool>("EmergencyContact")
                        .HasColumnType("boolean");

                    b.Property<string>("Relation")
                        .HasColumnType("text");

                    b.HasKey("EnfantId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("TutorEnfant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bdfb0164-d8ee-46e6-8eab-c0a3d7a1fa2b",
                            ConcurrencyStamp = "1",
                            Name = "owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = "8175996e-0eb2-4d60-9cb9-9f1575cedffc",
                            ConcurrencyStamp = "2",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "00af114b-a523-4718-bdff-e539404775db",
                            ConcurrencyStamp = "3",
                            Name = "employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "ef771148-39c6-4fc6-8aeb-59800edc3cac",
                            ConcurrencyStamp = "4",
                            Name = "tutor",
                            NormalizedName = "TUTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ApplicationUserNotification", b =>
                {
                    b.HasOne("GarderieManagementClean.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ApplicationUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarderieManagementClean.Domain.Entities.Notification", null)
                        .WithMany()
                        .HasForeignKey("NotificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EnfantPhoto", b =>
                {
                    b.HasOne("GarderieManagementClean.Domain.Entities.Enfant", null)
                        .WithMany()
                        .HasForeignKey("EnfantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarderieManagementClean.Domain.Entities.Photo", null)
                        .WithMany()
                        .HasForeignKey("PhotosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GarderieManagementClean.Domain.Entities.Address", b =>
                {
                    b.HasOne("GarderieManagementClean.Domain.Entities.Garderie", "Garderie")
                        .WithOne("Address")
                        .HasForeignKey("GarderieManagementClean.Domain.Entities.Address", "GarderieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Garderie");
                });

            modelBuilder.Entity("GarderieManagementClean.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("GarderieManagementClean.Domain.Entities.Garderie", "Garderie")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("GarderieId");

                    b.Navigation("Garderie");
                });

            modelBuilder.Entity("GarderieManagementClean.Domain.Entities.Attendance", b =>
                {
                    b.HasOne("GarderieManagementClean.Domain.Entities.Enfant", "Enfant")
                        .WithMany("Attendances")
                        .HasForeignKey("EnfantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enfant");
                });

            modelBuilder.Entity("GarderieManagementClean.Domain.Entities.Enfant", b =>
                {
                    b.HasOne("GarderieManagementClean.Domain.Entities.Garderie", "Garderie")
                        .WithMany()
                        .HasForeignKey("GarderieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarderieManagementClean.Domain.Entities.Group", "Group")
                        .WithMany("Enfants")
                        .HasForeignKey("GroupId");

                    b.Navigation("Garderie");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("GarderieManagementClean.Domain.Entities.Group", b =>
                {
                    b.HasOne("GarderieManagementClean.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithOne("Group")
                        .HasForeignKey("GarderieManagementClean.Domain.Entities.Group", "EducatriceId");

                    b.HasOne("GarderieManagementClean.Domain.Entities.Garderie", "Garderie")
                        .WithMany("Groups")
                        .HasForeignKey("GarderieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Garderie");
                });

            modelBuilder.Entity("GarderieManagementClean.Domain.Entities.JournalDeBord", b =>
                {
                    b.HasOne("GarderieManagementClean.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("EducatriceId");

                    b.HasOne("GarderieManagementClean.Domain.Entities.Enfant", "Enfant")
                        .WithMany()
                        .HasForeignKey("EnfantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Enfant");
                });

            modelBuilder.Entity("GarderieManagementClean.Domain.Entities.Photo", b =>
                {
                    b.HasOne("GarderieManagementClean.Domain.Entities.Enfant", "PhotoCouvertureDe")
                        .WithOne("PhotoCouverture")
                        .HasForeignKey("GarderieManagementClean.Domain.Entities.Photo", "EnfantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("PhotoCouvertureDe");
                });

            modelBuilder.Entity("GarderieManagementClean.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("GarderieManagementClean.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("GarderieManagementClean.Domain.Entities.TutorEnfant", b =>
                {
                    b.HasOne("GarderieManagementClean.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Tutors")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarderieManagementClean.Domain.Entities.Enfant", "Enfant")
                        .WithMany("Tutors")
                        .HasForeignKey("EnfantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Enfant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GarderieManagementClean.Domain.Entities.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GarderieManagementClean.Domain.Entities.ApplicationUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarderieManagementClean.Domain.Entities.ApplicationUser", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GarderieManagementClean.Domain.Entities.ApplicationUser", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GarderieManagementClean.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Group");

                    b.Navigation("Logins");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Tokens");

                    b.Navigation("Tutors");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("GarderieManagementClean.Domain.Entities.Enfant", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("PhotoCouverture");

                    b.Navigation("Tutors");
                });

            modelBuilder.Entity("GarderieManagementClean.Domain.Entities.Garderie", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("ApplicationUsers");

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("GarderieManagementClean.Domain.Entities.Group", b =>
                {
                    b.Navigation("Enfants");
                });
#pragma warning restore 612, 618
        }
    }
}
